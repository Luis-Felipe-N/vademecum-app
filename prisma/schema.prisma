generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  profilePicture String?
  bio            String?

  points Int @default(0)
  level  Int @default(1)

  accounts   Account[]
  sessions   Session[]
  created_at DateTime  @default(now())
  password   String

  enrolledSubjects Subject[]
  answersProvided  Answer[]
  votes            Vote[]
  questionsCreated Question[]
  PointLog         PointLog[]
  UserBadge        UserBadge[]
  UserSubjectStats UserSubjectStats[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subject {
  id   String  @id @default(cuid())
  name String  @unique
  code String? @unique
  icon String  @default("<i class=\"fa-solid fa-circle\"></i>")

  studentsEnrolled User[]

  questions        Question[]
  UserSubjectStats UserSubjectStats[]

  @@map("subjects")
}

model Question {
  id        String         @id @default(cuid())
  title     String
  content   String         @db.Text
  file      String?
  status    QuestionStatus @default(OPEN)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  subjects Subject[]

  answers Answer[]

  @@map("questions")
}

model Answer {
  id             String   @id @default(cuid())
  content        String   @db.Text
  fileAttachment String?
  isBestAnswer   Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  votes Vote[]

  @@map("answers")
}

model Vote {
  id        String   @id @default(cuid())
  voteType  Int
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId String

  @@unique([authorId, answerId])
  @@map("votes")
}

// Gamification Models
model PointLog {
  id           String             @id @default(cuid())
  userId       String
  pointsGained Int
  sourceType   PointLogSourceType
  sourceId     String?
  createdAt    DateTime           @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("point_logs")
}

model Badge {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  type        BadgeType
  threshold   Int
  subjectId   String?
  icon        String
  createdAt   DateTime  @default(now())

  users UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model UserSubjectStats {
  id               String @id @default(cuid())
  userId           String
  subjectId        String
  answersCount     Int    @default(0)
  bestAnswersCount Int    @default(0)

  user    User    @relation(fields: [userId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([userId, subjectId])
  @@map("user_subject_stats")
}

enum Gender {
  M
  F
  O
  N
}

enum QuestionStatus {
  OPEN
  CLOSED
  ANSWERED
}

enum PointLogSourceType {
  BEST_ANSWER
  UPVOTE
  BADGE_AWARD
  DAILY_LOGIN
  CHALLENGE_COMPLETION
}

enum BadgeType {
  SUBJECT_ANSWERS
  TOTAL_ANSWERS
  BEST_ANSWERS
  PROFILE_ACTION
  MISSION
}
